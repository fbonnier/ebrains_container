# ====== SPACK ======= #
# Build stage with Spack pre-installed and ready to be used
FROM spack/ubuntu-jammy:develop AS builder

# What we want to install and how we want to install it
# is specified in a manifest file (spack.yaml)
COPY ./spack.yaml /opt/spack-environment/spack.yaml

# Get the additional EBRAINS package definitions
# TODO: here we get the main branch, we may wish to use a release tag
RUN git clone https://gitlab.ebrains.eu/ri/tech-hub/platform/esd/ebrains-spack-builds.git /opt/ebrains-spack-builds

# Install the software, remove unnecessary deps
RUN cd /opt/spack-environment && spack repo add /opt/ebrains-spack-builds && spack env activate . && spack install --fail-fast && spack gc -y

# Strip all the binaries
RUN find -L /opt/views/view/* -type f -exec readlink -f '{}' \; | \
    xargs file -i | \
    grep 'charset=binary' | \
    grep 'x-executable\|x-archive\|x-sharedlib' | \
    awk -F: '{print $1}' | xargs strip

# Modifications to the environment that are necessary to run
# RUN cd /opt/spack-environment && \
#     spack env activate --sh -d . > activate.sh


# ====== Model-Runner ======= #
FROM ubuntu:jammy AS model-runner


ENV TZ=Europe/Kiev

EXPOSE 667

# Set default shell
SHELL ["/bin/bash", "-c"]

# Set timezone
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# ARG GITLAB_DEPLOYED_USR
# ARG GITLAB_DEPLOYED_PASSWORD


# Update system and install requirements
COPY apt_requirements.txt apt_requirements.txt
RUN apt-get -y update && apt-get -y upgrade;
# apt-get -y install software-properties-common;\
# add-apt-repository universe;\
# apt-get -y update;
RUN xargs apt-get -y install < apt_requirements.txt

# Copy tools from SPACK
COPY --from=builder --chmod=777 /opt/spack-environment /opt/spack-environment
COPY --from=builder --chmod=777 /opt/software /opt/software
COPY --from=builder --chmod=777 /opt/views /opt/views

# Simulate Spack Env Activate
ENV SPACK_ENV="/opt/spack-environment"
ENV SPACK_ENV_VIEW="default"
ENV ACLOCAL_PATH="/opt/views/view/share/aclocal"
ENV CMAKE_PREFIX_PATH="/opt/views/view"
ENV GSL_ROOT_DIR="/opt/views/view"
ENV LD_LIBRARY_PATH="/opt/views/view/lib"
ENV MANPATH="/opt/views/view/share/man:/opt/views/view/man:/usr/share/man"
ENV MPICC="/opt/views/view/bin/mpicc"
ENV MPICXX="/opt/views/view/bin/mpic++"
ENV MPIF77="/opt/views/view/bin/mpif77"
ENV MPIF90="/opt/views/view/bin/mpif90"
ENV MPIFC="/opt/views/view/bin/mpifort"
ENV PATH="/opt/views/view/bin:/opt/spack/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
ENV PKG_CONFIG_PATH="/opt/views/view/lib/pkgconfig:/opt/views/view/share/pkgconfig:/opt/views/view/lib64/pkgconfig"
# ENV PYTHONPATH="/opt/views/view/lib/python3.11/site-packages"
ENV PATH="/usr/src/app:$PATH"

# Archiver
RUN wget -N https://github.com/mholt/archiver/releases/download/v3.5.0/arc_3.5.0_linux_amd64
RUN chmod a+x arc_*
RUN mkdir -p /usr/local/bin
RUN mv arc_* /usr/local/bin/arc

# Set Python Virtual Environment
ENV NEST_INSTALL_DIR="/opt/views/view"
ENV NEST_MODULE_PATH="/opt/views/view/lib/nest"
ENV SLI_PATH="/opt/views/view/share/sli"
COPY requirements.txt requirements.txt
RUN pip install --no-cache-dir --upgrade pip setuptools wheel
RUN pip install --no-cache-dir -r requirements.txt

# Datalad EBRAINS Extension
# RUN pip install git+https://github.com/datalad/datalad-ebrains.git
RUN pip install datalad

# # Install music
# RUN wget https://github.com/INCF/MUSIC/archive/master.tar.gz && \
# 	tar zxf master.tar.gz && \
# 	mkdir music-build music-install && \
# 	cd MUSIC-master && \
# 	sh ./autogen.sh && \
# 	cd ../music-build && \
# 	../MUSIC-master/configure --prefix=/opt/music-install && \
# 	make && \
# 	make install

# Install NEST 2.20.2
RUN wget https://github.com/nest/nest-simulator/archive/v2.20.2.tar.gz && \
  mkdir nest-build && \
  tar zxf v2.20.2.tar.gz && \
  cd  nest-build && \
  cmake -DCMAKE_INSTALL_PREFIX:PATH=/opt/views/view \
  		# -Dwith-optimize=ON \
		# -Dwith-warning=ON \
		# -Dwith-boost=ON \
		# -Dwith-ltdl=ON \
	    # -Dwith-gsl=ON \
	    # -Dwith-readline=ON \
        # -Dwith-python=3 \
        # -DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.6m.so \
	    # -DPYTHON_INCLUDE_DIR=/usr/include/python3.6m \
        # -Dwith-mpi=ON \
        # -Dwith-openmp=ON \
        # -Dwith-music=/opt/music-install \
        ../nest-simulator-2.20.2 && \
  make && \
  make install

# # Install cereb-nest extension
# RUN git clone https://github.com/dbbs-lab/cereb-nest/
# RUN cd cereb-nest; checkout nest2.20.2_python3.8; mkdir build; cd build; cmake -Dwith-nest=${NEST_INSTALL_DIR}/bin/nest-config ..; make; make install;

# RUN wget https://zenodo.org/records/10970203/files/cereb-nest-nest2.20.2_python3.8.zip
# RUN unzip cereb-nest-nest2.20.2_python3.8.zip
# RUN mkdir cereb-nest-build && \
#     cd cereb-nest-build &&\
#     cmake -Dwith-nest=${NEST_INSTALL_DIR}/bin/nest-config ../cereb-nest-nest2.20.2_python3.8 &&\
#     make &&\
#     make install


# # Install bgmodel
RUN git clone https://github.com/marcobiasizzo/bgmodel
RUN cd bgmodel; ./install-module-2.20.2.sh $NEST_INSTALL_DIR


# Install EBRAINS Metadata Downloader
# Download Metadata
# RUN git clone https://${GITLAB_DEPLOYED_USR}:${GITLAB_DEPLOYED_PASSWORD}@gitlab.ebrains.eu/model-verification/ebrains_download_metadata.git
RUN git clone https://github.com/fbonnier/ebrains_metadata_downloader.git
RUN chmod +x /ebrains_metadata_downloader/hbp_cwl_input_downloader
ENV PATH="/ebrains_metadata_downloader:${PATH}"

# Install HBP Data Downloader
# Download Data: code, input and output
# RUN git clone https://${GITLAB_DEPLOYED_USR}:${GITLAB_DEPLOYED_PASSWORD}@gitlab.ebrains.eu/model-verification/ebrains_data_downloader.git
RUN git clone https://github.com/fbonnier/ebrains_data_downloader.git
RUN chmod +x /ebrains_data_downloader/hbp_download_data
ENV PATH="/ebrains_data_downloader:${PATH}"

# Install HBP Script Generator
# Generates code, inputs, outputs and env
# RUN git clone https://${GITLAB_DEPLOYED_USR}:${GITLAB_DEPLOYED_PASSWORD}@gitlab.ebrains.eu/model-verification/ebrains_script_generator.git
RUN git clone https://github.com/fbonnier/ebrains_script_generator.git
RUN chmod +x /ebrains_script_generator/script_generator
ENV PATH="/ebrains_script_generator:${PATH}"

# Install HBP Documentation Checker
# Verification Method to analyze documentation
# RUN git clone https://${GITLAB_DEPLOYED_USR}:${GITLAB_DEPLOYED_PASSWORD}@gitlab.ebrains.eu/model-verification/ebrains_method_documentation.git
RUN git clone https://github.com/fbonnier/ebrains_vm_documentation_analysis.git
RUN chmod +x /ebrains_vm_documentation_analysis/documentation_check
ENV PATH="/ebrains_vm_documentation_analysis:${PATH}"

# Install HBP Decision Maker
# Computes final decision/proposition/advices/main score
# RUN git clone https://${GITLAB_DEPLOYED_USR}:${GITLAB_DEPLOYED_PASSWORD}@gitlab.ebrains.eu/model-verification/ebrains_decision_maker.git
RUN git clone https://github.com/fbonnier/ebrains_decision_maker.git
RUN chmod +x /ebrains_decision_maker/decision_maker
ENV PATH="/ebrains_decision_maker:${PATH}"

# Install HBP Watchdog extractor
# TODO
# RUN git clone https://${GITLAB_DEPLOYED_USR}:${GITLAB_DEPLOYED_PASSWORD}@gitlab.ebrains.eu/model-verification/ebrains_extract_watchdog.git
RUN git clone https://github.com/fbonnier/ebrains_extract_watchdog.git
RUN chmod +x /ebrains_extract_watchdog/hbp_extract_watchdog
ENV PATH="/ebrains_extract_watchdog:${PATH}"


# Install file-comparison-methods from GIT repo
# Result comparison
RUN pip3 install python-Levenshtein
# RUN git clone https://${GITLAB_DEPLOYED_USR}:${GITLAB_DEPLOYED_PASSWORD}@gitlab.ebrains.eu/model-verification/ebrains_file_comparison.git
RUN git clone https://github.com/fbonnier/ebrains_file_comparison.git
RUN chmod +x /ebrains_file_comparison/file_compare
ENV PATH="/ebrains_file_comparison:${PATH}"